// PROJECT  :LongISP_Trigonometer
// PURPOSE  :To display three basic trigonometric functions on LED matrices and their properties on the TFT LCD.
// COURSE   :ICS3U-E2
// AUTHOR   :William Xie
// DATE     :2025 01 18
// MCU      :2560
// STATUS   :Working (Partially)
// REFERENCE:http://darcy.rsgc.on.ca/ACES/TEI3M/2425/ISPs.html#logs

#include "SPI.h"               // Enable SPI communication
#include "Adafruit_GFX.h"      // Libraries for the TFT LCD
#include "Adafruit_ILI9341.h"
#include "LedControl.h"        // Library for controlling the matrices
#include "Keypad.h"            // Library for keypad

#define TFT_DC 7  // Necessary pins for initializing the TFT LCD
#define TFT_CS 53
#define TFT_RST 29
#define Black 0x0000  // Colour black in hex
#define Continue 2    //The button pins
#define sinFunction 3
#define cosFunction 4
#define tanFunction 5
#define reset 6

LedControl matrix = LedControl(31, 47, 23, 8);  // Initialize the LED control library

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_RST);  // Initialize the TFT LCD library

// keypad setups
const byte ROWS = 4;  // four rows
const byte COLS = 3;  // three columns
char keys[ROWS][COLS] = {
  { '1', '2', '3' },
  { '4', '5', '6' },
  { '7', '8', '9' },
  { ' ', '0', ' ' }
};                                        // 2D array of keys
byte rowPins[ROWS] = { 24, 35, 37, 41 };  // the row pins defined
byte colPins[COLS] = { 43, 27, 39 };      // the column pins defined

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);  // Initialize the keypad library

uint8_t sineFunction[32][3] = {
  // 2D array for points on the sine function
  { 7, 7, 0 },
  { 7, 6, 1 },
  { 7, 5, 2 },
  { 7, 5, 3 },
  { 7, 4, 4 },
  { 7, 4, 5 },
  { 7, 5, 6 },
  { 7, 5, 7 },
  { 6, 6, 0 },
  { 6, 7, 1 },
  { 2, 0, 2 },
  { 2, 1, 3 },
  { 2, 2, 4 },
  { 2, 2, 5 },
  { 2, 3, 6 },
  { 2, 3, 7 },
  { 1, 2, 0 },
  { 1, 2, 1 },
  { 1, 1, 2 },
  { 1, 0, 3 },
  { 5, 7, 4 },
  { 5, 6, 5 },
  { 5, 5, 6 },
  { 5, 5, 7 },
  { 4, 4, 0 },
  { 4, 4, 1 },
  { 4, 5, 2 },
  { 4, 5, 3 },
  { 4, 6, 4 },
  { 4, 7, 5 },
  { 0, 0, 6 },
  { 0, 1, 7 },
};

uint8_t cosineFunction[32][3] = {
  // 2D array for points on the cosine function
  { 7, 4, 0 },
  { 7, 5, 1 },
  { 7, 5, 2 },
  { 7, 6, 3 },
  { 7, 7, 4 },
  { 3, 0, 5 },
  { 3, 1, 6 },
  { 3, 2, 7 },
  { 2, 2, 0 },
  { 2, 3, 1 },
  { 2, 3, 2 },
  { 2, 2, 3 },
  { 2, 2, 4 },
  { 2, 1, 5 },
  { 2, 0, 6 },
  { 6, 7, 7 },
  { 5, 6, 0 },
  { 5, 5, 1 },
  { 5, 5, 2 },
  { 5, 4, 3 },
  { 5, 4, 4 },
  { 5, 5, 5 },
  { 5, 5, 6 },
  { 5, 6, 7 },
  { 4, 7, 0 },
  { 0, 0, 1 },
  { 0, 1, 2 },
  { 0, 2, 3 },
  { 0, 2, 4 },
  { 0, 3, 5 },
  { 0, 3, 6 },
  { 0, 2, 7 },
};

uint8_t tangentFunction[59][3] = {
  // 2D array for the points on the tangent function
  { 7, 2, 0 },
  { 7, 1, 0 },
  { 7, 0, 0 },
  { 3, 7, 0 },
  { 3, 6, 0 },
  { 3, 5, 0 },
  { 3, 4, 1 },
  { 3, 3, 1 },
  { 3, 2, 2 },
  { 3, 1, 3 },
  { 3, 0, 4 },
  { 7, 7, 5 },
  { 7, 6, 6 },
  { 7, 5, 7 },
  { 6, 4, 0 },
  { 6, 3, 0 },
  { 6, 2, 1 },
  { 6, 1, 1 },
  { 6, 0, 1 },
  { 2, 7, 1 },
  { 2, 6, 1 },
  { 2, 5, 1 },
  { 2, 4, 2 },
  { 2, 3, 2 },
  { 2, 2, 3 },
  { 2, 1, 4 },
  { 2, 0, 5 },
  { 6, 7, 6 },
  { 6, 6, 7 },
  { 5, 5, 0 },
  { 5, 4, 1 },
  { 5, 3, 1 },
  { 5, 2, 2 },
  { 5, 1, 2 },
  { 5, 0, 2 },
  { 1, 7, 2 },
  { 1, 6, 2 },
  { 1, 5, 2 },
  { 1, 4, 3 },
  { 1, 3, 3 },
  { 1, 2, 4 },
  { 1, 1, 5 },
  { 1, 0, 6 },
  { 5, 7, 7 },
  { 4, 6, 0 },
  { 4, 5, 1 },
  { 4, 4, 2 },
  { 4, 3, 2 },
  { 4, 2, 3 },
  { 4, 1, 3 },
  { 4, 0, 3 },
  { 0, 7, 3 },
  { 0, 6, 3 },
  { 0, 5, 3 },
  { 0, 4, 4 },
  { 0, 3, 4 },
  { 0, 2, 5 },
  { 0, 1, 6 },
  { 0, 0, 7 },
};

void sinFunctionGraph() {                               // Set up the equation for the sine function
  if (digitalRead(sinFunction) == HIGH) {               // If the sine function button is pressed...
    tft.setCursor(25, 50);                              // Move the cursor to an ideal position
    tft.fillScreen(Black);                              // Fill the background with colour black
    tft.println("Input parameters for your function");  // Ask for parameters
    tft.setCursor(0, 100);                              // Move the cursor leftwards and downwards
    tft.println("( )sin(( )x-( ))+( )");                // Print the function without parameters
    for (uint8_t i = 0; i < 32; i++) {                  // Graph f(x) = sinx
      matrix.setLed(sineFunction[i][0], sineFunction[i][1], sineFunction[i][2], true);
    }
    tft.setCursor(0, 200);       // Move the cursor downwards
    tft.println("f(x) = sinx");  // Properties of f(x)=sinx
    tft.println("Amplitude: 1");
    tft.println("Period: 2pi");
    tft.println("Domain: R");
    tft.println("Range: [-1, 1]");
  }
}

void cosFunctionGraph() {                               // Set up the equation for the cosine function
  if (digitalRead(cosFunction) == HIGH) {               // If the cosine function button is pressed...
    tft.setCursor(25, 50);                              // Move the cursor to an ideal position
    tft.fillScreen(Black);                              // Fill the background with colour black
    tft.println("Input parameters for your function");  // Ask for parameters
    tft.setCursor(0, 100);                              // Move the cursor leftwards and downwards
    tft.println("( )cos(( )x-( ))+( )");                // Print the function without parameters
    for (uint8_t i = 0; i < 32; i++) {                  // Graph f(x)=cosx
      matrix.setLed(cosineFunction[i][0], cosineFunction[i][1], cosineFunction[i][2], true);
    }
    tft.setCursor(0, 200);       // Move the cursor downwards
    tft.println("f(x) = cosx");  // Properties of f(x)=cosx
    tft.println("Amplitude: 1");
    tft.println("Period: 2pi");
    tft.println("Domain: R");
    tft.println("Range: [-1, 1]");
  }
}

void tanFunctionGraph() {                               // Set up the equation for the tangent function
  if (digitalRead(tanFunction) == HIGH) {               // If the tangent function button is pressed...
    tft.setCursor(25, 50);                              // Move the cursor to an ideal position
    tft.fillScreen(Black);                              // Fill the background with colour black
    tft.println("Input parameters for your function");  // Ask for parameters
    tft.setCursor(0, 100);                              // Move the cursor leftwards and downwards
    tft.println("( )tan(( )x-( ))+( )");                // Print the function without parameters
    for (uint8_t i = 0; i < 59; i++) {                  // Graph f(x)=tanx
      matrix.setLed(tangentFunction[i][0], tangentFunction[i][1], tangentFunction[i][2], true);
    }
    tft.setCursor(0, 200);       // Move the cursor downwards
    tft.println("f(x) = tanx");  // Properties of f(x)=tanx
    tft.println("Amplitude: N/A");
    tft.println("Period: pi");
    tft.println("Domain: {xER|x!=(pi/2+kpi),kEZ");
    tft.println("Range: [-infinite, +infinite]");
  }
}

void tftSetup() {             // Set up the TFT LCD
  tft.fillScreen(Black);      // Fill the background with colour black
  tft.setCursor(25, 120);     // Move the cursor to an ideal position
  tft.setTextSize(3);         // Set the text size to 3
  tft.println("Welcome to");  // Display welcoming texts
  tft.println("Trigonometer!");
}

void tftDisplay() {                                                        // Display instructions on the TFT LCD
  uint32_t startTime = millis();                                           // Record current time
  uint16_t Interval = 2000;                                                // Time to decide what to do next on each page (manually set small for saving time when trying the functionality of codes)
  while (millis() - startTime < Interval) {                                // When the current time is less than 2 seconds...
    if (digitalRead(Continue) == HIGH) {                                   // If the continue button is pressed...
      tft.fillScreen(Black);                                               // Fill the background with colour black
      tft.setCursor(25, 50);                                               // Move the cursor to an ideal position
      tft.setTextSize(2);                                                  // Decrease the size of the text
      tft.println("Which mode would you like to use?");                    // Ask which mode will be used
      tft.setCursor(5, 120);                                               // Move the cursor leftwards and downwards
      tft.println("Entering Parameters");                                  // Option 1
      tft.setCursor(15, 190);                                              // Move the cursor rightwards and downwards
      tft.println("Joystick Creation");                                    // Option 2
      while (millis() - startTime < Interval + 2000) {                     // When the current time now is less than 4 seconds...
        if (digitalRead(Continue) == HIGH) {                               // If the continue button is pressed again...
          tft.setCursor(25, 50);                                           // Move the cursor to the original position
          tft.fillScreen(Black);                                           // Fill the background with colour black
          tft.println("Which type of function would you like to graph?");  // Ask what type of function will be graphed
          while (millis() - startTime < Interval + 4000) {                 // When the current time now is less than 6 seconds...
            sinFunctionGraph();                                            // Perform these functions
            cosFunctionGraph();
            tanFunctionGraph();
          }
        }
      }
    }
  }
}


void setup() {
  tft.begin();                                           // Initialize the TFT LCD
  uint8_t devices = matrix.getDeviceCount();             // Count the number of individual matrices
  for (int address = 0; address < devices; address++) {  // Initialize all devices
    matrix.shutdown(address, false);                     // Change the power-saving mode of the devices to normal mode
    matrix.setIntensity(address, 1);                     // Set the brightness to a medium value
    matrix.clearDisplay(address);                        // Clear the display
  }
  tftSetup();  // TFT LCD setup and instructions display is only done once
  tftDisplay();
}

uint8_t parameter = 0;  // Set parameter as 0

void parameterAmplitude() {                // Entering parameter amplitude
  char amplitude = keypad.getKey();        // Detect the key pressed
  uint8_t amplitudeCursorx = 10;           // Set the x-position of the amplitude value
  if (amplitude) {                         // If a key is pressed...
    tft.setCursor(amplitudeCursorx, 100);  // Move the cursor to the right position
    tft.println(amplitude);                // Print the corresponding amplitude value
    parameter++;                           // The value of the parameter increases by 1 (switch to next case)
  }
}

void parameterPeriod() {                // Entering parameter period
  char period = keypad.getKey();        // Detect the key pressed
  uint8_t periodCursorx = 95;           // Set the x-position of the period value
  if (period) {                         // If a key is pressed...
    tft.setCursor(periodCursorx, 100);  // Move the cursor to the right position
    tft.println(period);                // Print the corresponding period value
    parameter++;                        // The value of the parameter increases by 1 (switch to next case)
  }
}

void parameterPhaseShift() {           // Entering parameter phase shift
  char phaseShift = keypad.getKey();   // Detect the key pressed
  uint8_t phaseCursorx = 155;          // Set the x-position of the phase shift value
  if (phaseShift) {                    // If a key is pressed...
    tft.setCursor(phaseCursorx, 100);  // Move the cursor to the right position
    tft.println(phaseShift);           // Print the corresponding phase shift value
    parameter++;                       // The value of the parameter increases by 1 (switch to next case)
  }
}

void parameterVD() {                // Entering parameter vertical displacement
  char VD = keypad.getKey();        // Detect the key pressed
  uint8_t VDCursorx = 220;          // Set the x-position of the vertical displacement value
  if (VD) {                         // If a key is pressed...
    tft.setCursor(VDCursorx, 100);  // Move the cursor to the right position
    tft.println(VD);                // Print the corresponding vertical displacement value
  }
}

void keypadInput() {
  switch (parameter) {  // Input the parameters in order
    case 0:
      parameterAmplitude();  // Entering amplitude
      break;
    case 1:
      parameterPeriod();  // Entering period
      break;
    case 2:
      parameterPhaseShift();  // Entering phase shift
      break;
    case 3:
      parameterVD();  // Entering vertical displacement
      break;
  }
}

void resetSystem() {                 // Reset the whole device
  if (digitalRead(reset) == HIGH) {  // If the reset button is pressed...
    setup();                         // Go back to setup function
  }
}

void loop() {  // Always allow inputting parameters and resetting the system
  keypadInput();
  resetSystem();
}
